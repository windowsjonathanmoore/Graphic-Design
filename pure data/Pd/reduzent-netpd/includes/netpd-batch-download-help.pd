#N canvas 405 44 504 563 10;
#X obj 0 0 cnv 15 500 30 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 7 7 netpd-batch-download -;
#X text 145 7 download several patches and abstractions in one go;
#X obj 20 416 netpd-batch-download /helppatch;
#X obj 20 501 print netpd-batch-download;
#X msg 203 440 no_peer;
#X text 22 43 [netpd-batch-download] is a wrapper around [netpd-patch-download]
and eases the download of many patches and/or abstractions.;
#X text 23 88 It supports three methods:;
#X text 36 104 * patch: download patch;
#X text 36 119 * abstraction: download abstraction;
#X text 284 450 inlet0: patch|abstraction|msg;
#X text 279 468 outlet0: msg output;
#X text 279 486 outlet1: error output;
#X text 36 134 * msg: message to be posted after previous task finished
;
#X text 24 153 Contrary to [netpd-patch-download] it accepts new tasks
before old tasks are finished. Those are stored and processed one after
the other.;
#X text 24 434 messages;
#X text 24 198 If no peer is responding to download requests \, a bang
is output at the right outlet and all scheduled tasks are cleared.
;
#X text 296 423 arg1: /name (OSC address field);
#X text 23 241 It's the responsibility of the user to make sure \,
that requested patches/abstractions exist on the remote peer's side
(in netpd it is assumed that all peers in a 'ready' state have the
currently used patches).;
#X msg 20 307 msg start download \, patch example-patch \, abstraction
example-abs \, msg download finished;
#X msg 50 350 ready;
#X msg 59 376 unready;
#X connect 3 0 4 0;
#X connect 3 1 5 0;
#X connect 5 0 4 0;
#X connect 19 0 3 0;
#X connect 20 0 3 0;
#X connect 21 0 3 0;
