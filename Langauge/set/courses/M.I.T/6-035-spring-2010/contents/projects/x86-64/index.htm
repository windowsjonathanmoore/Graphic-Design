<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>X86-64 Architecture Guide | Projects | Computer Language Engineering | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-035-computer-language-engineering-spring-2010" name="WT.cg_n">
<meta content="X86-64 Architecture Guide" name="WT.cg_s">
<meta content="This section presents a guide to the X86-64 instruction set and architecture. Includes example code, a link to a more complete reference, and information on registers, instruction set, stack organization, and calling convention." name="Description">
<meta content="Amarasinghe, Saman" name="Author">
<meta content="Rinard, Martin" name="Author">
<meta content="compilers,compiler design,compiler implementation,scanner,parser,semantic checker,code generation,dataflow optimizations,optimizer,Programming Languages,Software Design and Engineering" name="keywords">
<meta content="6.035 Computer Language Engineering | X86-64 Architecture Guide" name="Search_Display">
<meta content="Programming Languages" itemprop="about">
<meta content="Software Design and Engineering" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link href="https://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-035-computer-language-engineering-spring-2010/projects/x86-64">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top"><div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW"><table class="social"><tbody><tr>
<td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Google+" href="https://plus.google.com/104567381989352550847/posts"><img src="../../../common/images/icon_gp.png" alt="Click to visit our Google+ page."></a>                   <a aria-label="Pinterest" href="https://www.pinterest.com/mitocw/pins/"><img src="../../../common/images/icon_pin.png" alt="Click to visit our Pinterest page."></a>                   <a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>                   <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="../../../common/images/icon_tw.png" alt="Click to visit our Twitter feed."></a>
</td>
        </tr></tbody></table></aside><nav aria-label="Help Links" class="helplinks"><a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/jsp/feedback.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<nav id="mega" class="grid_8 alpha" aria-label="Site"><ul id="menu" role="presentation">
<li id="menu_home">
        <a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
    </li>
<!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses" class="selected">
      <a href="#" aria-hidden="true">Find Courses</a><!-- Begin 5 columns Item -->
      <div class="dropdown_5columns-a mega-courses">
        <div class="col_1a">
          <div class="row_1a">
            <nav aria-labelledby="mm-find-courses-by"><span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
              <ul class="find_by" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
            		<li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-megamenu&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
							</ul></nav><nav aria-labelledby="mm-collections"><span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
              <ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
              </ul></nav><nav class="col_1b" aria-labelledby="mm-translated-courses"><span id="mm-translated-courses" class="nav" aria-hidden="true">Translated Courses</span>
							<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/spanish" aria-label="Spanish">Español / Spanish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/portuguese" aria-label="Portuguese">Português / Portuguese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/persian" aria-label="Persian">فارسی / Persian</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses">More...</a></li>
							</ul></nav>
</div>
          <div class="row_1b">
            <nav aria-labelledby="mm-cross-disciplinary-topic-lists"><span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Cross-Disciplinary Topic Lists</span>
            	<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
              	<li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
              </ul></nav>
</div>
        </div>

      </div>
    </li>
    <li id="drop_2">
        <a href="" aria-hidden="true">About</a>
        <div class="dropdown_1column-a">
            <nav class="col_1" aria-label="About"><ul role="presentation">
<li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
                    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
                    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
                </ul></nav>
</div>
    </li>
    <li id="drop_3">
        <a href="" aria-hidden="true">Donate</a>
        <div class="dropdown_1column-a">
          <nav class="col_1" aria-label="Donate"><ul role="presentation">
<li><a href="https://ocw.mit.edu/donate/">Make a Donation</a></li>
              <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
              <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
              <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
              <li><a href="https://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
              <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
            </ul></nav>
</div>
    </li>
    <li id="drop_4">
      <a href="" aria-hidden="true">Featured Sites</a>
      <div class="dropdown_1column-a">
        <nav class="col_1" aria-labelledby="mm-featured-sites"><span id="mm-featured-sites" class="nav" aria-hidden="true">OCW Initiatives</span>
          <ul role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
            <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=featured-sites">OCW Educator</a></li>
            <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
            <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
					</ul></nav><nav class="col_1" aria-labelledby="mm-featured-external-links"><span id="mm-featured-external-links" class="nav" aria-hidden="true">Beyond OCW</span>
					<ul>
<li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT Plus K12 Videos">MIT+K12 Videos</a></li>
            <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
						<li><a href="https://outreach.mit.edu" aria-label="External Link: Outreach at MIT">Outreach @ MIT</a></li>
						<li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
          </ul></nav>
</div>
    </li>
  </ul></nav><div id="search" role="search" class="grid_4 omega">
  
    <form aria-label="Advanced Search" method="get" action="../../../common/search/AdvancedSearch.htm">
		  <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td>
            <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>
            <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
          </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end --><div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb"><p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Computer Language Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/projects/index.htm">Projects</a>
            
                »
                
            
            
         
    
    
        
            
            
            X86-64 Architecture Guide
         
    
</p>

                 </nav><div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            X86-64 Architecture Guide
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course"><script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/Syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/lecture-notes/index.htm">
		                  Lecture Notes  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/projects/index.htm">
		                  Projects  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends --></nav><main id="course_inner_section" aria-labelledby="section_title"><p>For the code-generation project, we expect your compiler to produce simple assembly code. We shall expose you to a subset of the x86-64 platform.</p>
<h2 class="subhead">Example</h2>
<p>Consider the following Decaf program:</p>
<p><span style="font-family: Courier New, Courier">class Program {</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">int foo(int x) {</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">return x + 3;</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">}</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">void main() {</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">int y;</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">y = foo(callout("get_int_035"));</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">if (y == 15) {</span></p>
<p style="margin-left: 120px"><span style="font-family: Courier New, Courier">callout("printf", "Indeed! \'tis 15!\n");</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">} else {</span></p>
<p style="margin-left: 120px"><span style="font-family: Courier New, Courier">callout("printf", "What! %d\n", y);</span></p>
<p style="margin-left: 80px"><span style="font-family: Courier New, Courier">}</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">}</span></p>
<p><span style="font-family: Courier New, Courier">}</span></p>
<p>For the code generation phase of the compiler project, you are encouraged to output simple and inefficient (but correct!) assembly code. This assembly code can assign every variable and temporary to a location on the current stack frame. Every expression value will be loaded from the stack, manipulated using the registers %r10 and %r11, and then the result will be written back to the stack, ready to be used in another expression. Compiling the above decaf code using this simple scheme might look like this:</p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">foo:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">enter $(8*2), $0</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rdi, -8(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -8(%rbp), %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">add $3, %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %r10, -16(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -16(%rbp), %rax</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">leave</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">ret .globl main</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">main:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">enter $(8 * 6), $0</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">call get_int_035</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rax, -8(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -8(%rbp), %rdi</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">call foo</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rax, -16(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -16(%rbp), %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %r10, -24(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -24(%rbp), %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $15, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">cmp %r10, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $0, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $1, %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">cmove %r10, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %r11, -32(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -32(%rbp), %r10</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $1, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">cmp %r10, %r11</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">je .fifteen</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $.what, %rdi</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov -24(%rbp), %rsi</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $0, %rax</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">call printf</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rax, -40(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">jmp .fifteen_done</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.fifteen:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $.indeed, %rdi</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $0, %rax</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">call printf</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rax, -48(%rbp)</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.fifteen_done:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov $0, %rax</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">leave</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">ret</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.indeed:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">.string "Indeed, \'tis 15!\n"</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.what:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">.string "What! %d\n"</span></p>
<p>We shall dissect this assembly listing carefully and relate it to the Decaf code. Note that this is not the only possible assembly of the program; it only serves as an illustration of some techniques you can use in this project phase.</p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">foo:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">enter $(8 * 2), $0</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rdi, -8(%rbp)</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">...</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">leave</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">ret</span></p>
<ul>
<li>This is the standard boilerplate code for a function definition. The first line creates a <em>label</em> which names the entry point of the function. The following <span style="font-family: Courier New, Courier">enter</span> instruction sets up the <a href="#Stack_Organization">stack frame</a>. After the function is done with its actual work, the <span style="font-family: Courier New, Courier">leave</span> instruction restores the stack frame for the caller, and <span style="font-family: Courier New, Courier">ret</span> passes control back to the caller.</li>
<li>Notice that one of the operands to <span style="font-family: Courier New, Courier">enter</span> is a static arithmetic expression. Such expressions are evaluated by the assembler and converted into constants in the final output.</li>
<li>Enter first saves the callers frame (base) pointer (%rbp) unto the stack. Then it sets the frame pointer to the stack pointer (%rsp) to set the current frame pointer. Enter next allocates N bytes (where N is the left operand) of stack space to be used for locals and temporaries of the stack frame. It does this by subtracting N from %rsp (remember that the stack grows downward toward address 0). This space is allocated after the caller's frame (base) pointer is saved to the stack.</li>
<li>The mov instruction moves the 1st argument (passed in %rdi) to its place on the stack. The argument occupies the first stack position (stack entries are 8 bytes) after the base pointer (%rbp). 0(%rbp) stores the previous frame's base pointer. <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -8(%rbp), %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">add $3, %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov %r10, -16(%rbp)</span></p>
</li>
<li>The purpose of foo (int) is to add 3 to its argument, and return the result. The first mov instruction fetches the argument from the stack and places it in the temporary register %r10. The next instruction increments the value in %r10 by the literal or <em>immediate</em> value 3. Note that immediate values are always prefixed by a '$'.</li>
<li>The second mov instruction stores the value of the addition back onto the stack at the second position of the frame (after the saved %rbp). <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -16(%rbp), %rax</span></p>
</li>
<li>According to the <a href="#Calling_Convention">calling convention</a>, a function must place its return value in the <span style="font-family: Courier New, Courier">%rax</span> register, so <span style="font-family: Courier New, Courier">foo</span> has succeeded in returning <span style="font-family: Courier New, Courier">x + 3</span> by moving the value of the x + 3 expression into %rax.</li>
</ul>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">.globl main</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">main:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">enter $(8 * 6), $0</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">...</span></p>
<ul>
<li>The <span style="font-family: Courier New, Courier">.globl main</span> directive makes the symbol main accessible to modules other than this one. This is important, because the C run-time library, which we link against, expects to find a <span style="font-family: Courier New, Courier">main</span> procedure to call at program startup.</li>
<li>The enter instruction allocates space for 6 quadwords on the stack: one for a local variable and 5 for temporaries.</li>
</ul>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">call get_int_035</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">mov %rax, -8(%rbp)</span></p>
<ul>
<li>We call the <span style="font-family: Courier New, Courier">get_int_035</span> function, which reads an integer from standard input and returns it. The function takes no arguments.</li>
<li>The integer is returned in <span style="font-family: Courier New, Courier">%rax</span>, and we store the value of the method call expression onto the stack. <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -8(%rbp), %rdi</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">call foo</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov %rax, -16(%rbp)</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -16(%rbp), %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov %r10, -24(%rbp)</span></p>
</li>
<li>Now we are ready to call foo. We start by loading the temporary that stored the return value of <span style="font-family: Courier New, Courier">get_int_035</span> into <span style="font-family: Courier New, Courier">%rdi</span>. According to the calling convention defined in the Linux ABI (<a href="#Calling_Convention">see below</a>), %rbi is used to pass the first argument. Then we call foo.</li>
<li>Once foo returns, we store the return value, stored in %rax, onto the stack at location -16(%rbp).</li>
<li>Next, we perform the assignment to y of the return value of foo by loading the temporary into %r10 and storing %r10 into the stack location designated for y, -24(%rbp). <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -24(%rbp), %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $15, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">cmp %r10, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $0, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $1, %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">cmove %r10, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov %r11, -32(%rbp)</span></p>
</li>
<li>This sequence demonstrates how a comparison operation might be implemented using only two registers and temporary storage. We begin by loading the values to compare, i.e., y and the literal 15, into registers. This is necessary because the comparison instructions only work on register operands.</li>
<li>Then, we perform the actual comparison using the <span style="font-family: Courier New, Courier">cmp</span> instruction. The result of the comparison is to change the internal flags register.</li>
<li>Our aim is to store a boolean value—1 or 0—in a temporary variable as the result of this operation. To set this up, we place the two possible values, 1 and 0, in registers <span style="font-family: Courier New, Courier">%r10</span> and <span style="font-family: Courier New, Courier">%r11</span>.</li>
<li>Then we use the <span style="font-family: Courier New, Courier">cmove</span> instruction (read <span style="font-family: Courier New, Courier">c-mov-e</span>, or conditional move if equal) to decide whether our output value should be 0 or 1, based on the flags set by our previous comparison. The instruction puts the result in <span style="font-family: Courier New, Courier">%r11</span>.</li>
<li>Finally, we store the boolean value from <span style="font-family: Courier New, Courier">%r11</span> to a temporary variable at <span style="font-family: Courier New, Courier">-32(%rbp)</span>. <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -32(%rbp), %r10</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $1, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">cmp %r10, %r11</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">je .fifteen</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">...</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">jmp .fifteen_done</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.fifteen:</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">....fifteen_done:</span></p>
</li>
<li>This is the standard linearized structure of a conditional statement. We compare a boolean variable to 1, and perform a <span style="font-family: Courier New, Courier">je</span> (jump if equal) instruction which jumps to its target block if the comparison succeeded. If the comparison failed, <span style="font-family: Courier New, Courier">je</span> acts as a no-op.</li>
<li>We mark the end of the target block with a label, and jump to it at the end of the fall-through block. Conventionally, such <em>local labels</em>, which do not define functions, are named starting with a period. <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $.what, %rdi</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov -24(%rbp), %rsi</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $0, %rax</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">call printf</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov %rax, -40(%rbp)</span></p>
</li>
<li>The block of instructions performs the false (else) block of the if statement.</li>
<li>We first load the value of the .what string (see below) into %rdi. Next we load the value of y into %rsi. %rsi is the register designated for the second argument of a function.</li>
<li>The third mov instruction is necessary for printf because printf uses a variable list of arguments. We must assign 0 to %rax to let printf know that we are not using SSE registers to pass any of the arguments.</li>
<li>After the call, the final move instruction stores the return value of printf onto the stack. Note that the return value is never referenced. <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">mov $0, %rax</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">leave</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">ret</span></p>
</li>
<li>At the end of the procedure, we set <span style="font-family: Courier New, Courier">%rax</span> to 0 to indicate that the program has terminated successfully (used even though the main method is declared to be of type void). <p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.indeed:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">.string "Indeed, \'tis 15!\n"</span></p>
<p style="margin-left: 40px"><span style="font-family: Courier New, Courier">.what:</span></p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">.string "What! %d\n"</span></p>
</li>
<li>These labels point to static strings defined in the program. They are used as arguments to callout functions.</li>
</ul>
<h2 class="subhead">Reference</h2>
<p>This handout only mentions a small subset of the rich possibilities provided by the x86-64 instruction set and architecture. For a more complete (but still readable) introduction, consult The <em><a href="http://support.amd.com/us/Pages/AMDSupportHub.aspx">AMD64 Architecture Programmer's Manual, Volume 1: Application Programming</a></em>.</p>
<h2 class="subhead">Registers</h2>
<p>In the assembly syntax accepted by <span style="font-family: Courier New, Courier">gcc</span>, register names are always prefixed with <span style="font-family: Courier New, Courier">%</span>. All of these registers are 64 bits wide.</p>
<p>The register file is as follows:</p>
<div class="maintabletemplate"><table summary="See table caption for summary." class="tablewidth50">
<caption class="invisible">Register purpose.</caption>
<thead><tr>
<th scope="col">REGISTER</th>
<th scope="col">PURPOSE</th>
<th scope="col">SAVED ACROSS CALLS</th>
</tr></thead>
<tbody>
<tr class="row">
<td>%rax</td>
<td><span style="font-family: Courier New, Courier">temp register; return value</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">%rbx</span></td>
<td><span style="font-family: Courier New, Courier">callee-saved</span></td>
<td><span style="font-family: Courier New, Courier">Yes</span></td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">%rcx</span></td>
<td><span style="font-family: Courier New, Courier">used to pass 4th argument to functions</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">%rdx</span></td>
<td><span style="font-family: Courier New, Courier">used to pass 3rd argument to functions</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">%rsp</span></td>
<td><span style="font-family: Courier New, Courier">stack pointer</span></td>
<td><span style="font-family: Courier New, Courier">Yes</span></td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">%rbp</span></td>
<td><span style="font-family: Courier New, Courier">callee-saved; base pointer</span></td>
<td><span style="font-family: Courier New, Courier">Yes</span></td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">%rsi</span></td>
<td><span style="font-family: Courier New, Courier">used to pass 2nd argument to functions</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="alt-row">
<td>%rdi</td>
<td>used to pass 1st argument to functions</td>
<td>No</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">%r8</span></td>
<td><span style="font-family: Courier New, Courier">used to pass 5th argument to functions</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">%r9</span></td>
<td><span style="font-family: Courier New, Courier">used to pass 6th argument to functions</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">%r10-r11</span></td>
<td><span style="font-family: Courier New, Courier">temporary</span></td>
<td><span style="font-family: Courier New, Courier">No</span></td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">%r12-r15</span></td>
<td><span style="font-family: Courier New, Courier">callee-saved registers</span></td>
<td><span style="font-family: Courier New, Courier">Yes</span></td>
</tr>
</tbody>
</table></div>
<p>For the code generation phase of the project you will not be performing register allocation. You should use %r10 and %r11 for temporary values that you load from the stack.</p>
<h2 class="subhead">Instruction Set</h2>
<p>Each mnemonic opcode presented here represents a family of instructions. Within each family, there are variants which take different argument types (registers, immediate values, or memory addresses) and/or argument sizes (byte, word, double-word, or quad-word). The former can be distinguished from the prefixes of the arguments, and the latter by an optional one-letter suffix on the mnemonic.</p>
<p>For example, a mov instruction which sets the value of the 64-bit <span style="font-family: Courier New, Courier">%rax</span> register to the immediate value 3 can be written as</p>
<p style="margin-left: 60px"><span style="font-family: Courier New, Courier">movq $3, %rax</span></p>
<p>Immediate operands are always prefixed by <span style="font-family: Courier New, Courier">$</span>. Un-prefixed operands are treated as memory addresses, and should be avoided since they are confusing.</p>
<p>For instructions which modify one of their operands, the operand which is modified appears second. This differs from the convention used by Microsoft's and Borland's assemblers, which are commonly used on DOS and Windows.</p>
<div class="maintabletemplate"><table summary="See table caption for summary." class="tablewidth75">
<caption class="invisible">Opcode description.</caption>
<thead><tr>
<th scope="col">OPCODE</th>
<th scope="col">DESCRIPTION</th>
</tr></thead>
<tbody>
<tr class="row"><td colspan="2"><strong>Copying values</strong></td></tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">mov src, dest</span></td>
<td>Copies a value from a register, immediate value or memory address to a register or memory address.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">cmove %src, %dest</span></td>
<td rowspan="6">Copies from register <span style="font-family: Courier New, Courier">%src</span> to register <span style="font-family: Courier New, Courier">%dest</span> if the last comparison operation had the corresponding result (<span style="font-family: Courier New, Courier">cmove</span>: equality, <span style="font-family: Courier New, Courier">cmovne</span>: inequality, <span style="font-family: Courier New, Courier">cmovg</span>: greater, <span style="font-family: Courier New, Courier">cmovl</span>: less, <span style="font-family: Courier New, Courier">cmovge</span>: greater or equal, <span style="font-family: Courier New, Courier">cmovle</span>: less or equal).</td>
</tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">cmovne %src, %dest</span></td></tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">cmovg %src, %dest</span></td></tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">cmovl %src, %dest</span></td></tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">cmovge %src, %dest</span></td></tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">cmovle %src, %dest</span></td></tr>
<tr class="alt-row"><td colspan="2"><strong>Stack management</strong></td></tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">enter $x, $0</span></td>
<td>Sets up a procedure's stack frame by first pushing the current value of <span style="font-family: Courier New, Courier">%rbp</span> on to the stack, storing the current value of <span style="font-family: Courier New, Courier">%rsp</span> in <span style="font-family: Courier New, Courier">%rbp</span>, and finally decreasing <span style="font-family: Courier New, Courier">%rsp</span> to make room for <span style="font-family: Courier New, Courier">x</span> byte-sized local variables.</td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">leave</span></td>
<td>Removes local variables from the stack frame by restoring the old values of <span style="font-family: Courier New, Courier">%rsp</span> and <span style="font-family: Courier New, Courier">%rbp</span>.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">push src</span></td>
<td>Decreases <span style="font-family: Courier New, Courier">%rsp</span> and places <span style="font-family: Courier New, Courier">src</span> at the new memory location pointed to by <span style="font-family: Courier New, Courier">%rsp</span>. Here, <span style="font-family: Courier New, Courier">src</span> can be a register, immediate value or memory address.</td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">pop dest</span></td>
<td>Copies the value stored at the location pointed to by <span style="font-family: Courier New, Courier">%rsp</span> to <span style="font-family: Courier New, Courier">dest</span> and increases <span style="font-family: Courier New, Courier">%rsp</span>. Here, <span style="font-family: Courier New, Courier">dest</span> can be a register or memory location.</td>
</tr>
<tr class="row"><td colspan="2"><strong>Control flow</strong></td></tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">call target</span></td>
<td>Jump unconditionally to target and push return value (current PC + 1) onto stack.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">ret</span></td>
<td>Pop the return address off the stack and jump unconditionally to this address.</td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">jmp target</span></td>
<td>Jump unconditionally to target, which is specified as a memory location (for example, a label).</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">je target</span></td>
<td rowspan="2">Jump to <span style="font-family: Courier New, Courier">target</span> if the last comparison had the corresponding result (je: equality; jne: inequality).</td>
</tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">jne target</span></td></tr>
<tr class="alt-row"><td colspan="2"><strong>Arithmetic and logic</strong></td></tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">add src, dest</span></td>
<td>Add <span style="font-family: Courier New, Courier">src</span> to <span style="font-family: Courier New, Courier">dest</span>.</td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">sub src, dest</span></td>
<td>Subtract <span style="font-family: Courier New, Courier">src</span> from <span style="font-family: Courier New, Courier">dest</span>.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">imul src, dest</span></td>
<td>Multiply dest by <span style="font-family: Courier New, Courier">src</span>.</td>
</tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">idiv divisor</span></td>
<td>Divide <span style="font-family: Courier New, Courier">rdx:rax</span> by <span style="font-family: Courier New, Courier">divisor</span>. Store quotient in <span style="font-family: Courier New, Courier">rax</span> and store remainder in <span style="font-family: Courier New, Courier">rdx</span>.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">shr reg</span></td>
<td rowspan="2">Shift <span style="font-family: Courier New, Courier">reg</span> to the left or right by value in <span style="font-family: Courier New, Courier">cl</span> (low 8 bits of rcx).</td>
</tr>
<tr class="row"><td><span style="font-family: Courier New, Courier">shl reg</span></td></tr>
<tr class="alt-row">
<td><span style="font-family: Courier New, Courier">ror src, dest</span></td>
<td>Rotate <span style="font-family: Courier New, Courier">dest</span> to the left or right by <span style="font-family: Courier New, Courier">src</span> bits.</td>
</tr>
<tr class="row">
<td><span style="font-family: Courier New, Courier">cmp src, dest</span></td>
<td>Set flags corresponding to whether <span style="font-family: Courier New, Courier">dest</span> is less than, equal to, or greater than <span style="font-family: Courier New, Courier">src</span>
</td>
</tr>
</tbody>
</table></div>
<h2 class="subhead">
<a name="Stack_Organization"></a>Stack Organization</h2>
<p>Global and local variables are stored on the stack, a region of memory that is typically addressed by offsets from the registers %rbp and %rsp. Each procedure call results in the creation of a <em>stack frame</em> where the procedure can store local variables and temporary intermediate values for that invocation. The stack is organized as follows:</p>
<div class="maintabletemplate"><table summary="See table caption for summary." class="tablewidth50">
<caption class="invisible">Frame contents.</caption>
<thead><tr>
<th scope="col">POSITION</th>
<th scope="col">CONTENTS</th>
<th scope="col">FRAME</th>
</tr></thead>
<tbody>
<tr class="row">
<td>
<p><span style="font-family: Courier New, Courier">8n+16(%rbp)</span></p>
<p><span style="font-family: Courier New, Courier">...</span></p>
<p><span style="font-family: Courier New, Courier">16(%rbp)</span></p>
</td>
<td>
<p>argument <span style="font-family: Courier New, Courier">n</span></p>
<p>...</p>
<p>argument 7</p>
</td>
<td>Previous</td>
</tr>
<tr class="alt-row">
<td rowspan="3">
<p><span style="font-family: Courier New, Courier">8(%rbp)</span></p>
<p><span style="font-family: Courier New, Courier">0(%rbp)</span></p>
<p><span style="font-family: Courier New, Courier">-8(%rbp)</span></p>
<p><span style="font-family: Courier New, Courier">...</span></p>
<p><span style="font-family: Courier New, Courier">0(%rsp)</span></p>
</td>
<td>return address</td>
<td rowspan="3">Current</td>
</tr>
<tr class="alt-row"><td>previous <span style="font-family: Courier New, Courier">%rbp</span> value</td></tr>
<tr class="alt-row"><td>locals and temps</td></tr>
</tbody>
</table></div>
<h2 class="subhead">
<a name="Calling_Convention"></a>Calling Convention</h2>
<p>We will use the standard Linux function calling convention. The calling convention is defined in detail in <em>System V Application Binary Interface—AMD64 Architecture Processor Supplement</em>. We will summarize the calling convention as it applies to decaf. (<img alt="This resource may not render correctly in a screen reader." src="../../../common/images/inacessible.gif"><a href="http://people.freebsd.org/~obrien/amd64-elf-abi.pdf">PDF</a>)</p>
<p>The caller uses registers to pass the first 6 arguments to the callee. Given the arguments in left-to-right order, the order of registers used is: %rdi, %rsi, %rdx, %rcx, %r8, and %r9. Any remaining arguments are passed on the stack in reverse order so that they can be popped off the stack in order.</p>
<p>The callee is responsible for preserving the value of registers %rbp %rbx, and %r12-r15, as these registers are owned by the caller. The remaining registers are owned by the callee.</p>
<p>The callee places its return value in <span style="font-family: Courier New, Courier">%rax</span> and is responsible for cleaning up its local variables as well as for removing the return address from the stack.</p>
<p>The <span style="font-family: Courier New, Courier">call</span>, <span style="font-family: Courier New, Courier">enter</span>, <span style="font-family: Courier New, Courier">leave</span> and <span style="font-family: Courier New, Courier">ret</span> instructions make it easy to follow this calling convention.</p>
<p>Since we follow the standard linux ABI, we can call C functions and library functions using our callout structure. For the purposes of the project we are only going to call <span style="font-family: Courier New, Courier">printf</span> and <span style="font-family: Courier New, Courier">get_int_035</span>. When calling <span style="font-family: Courier New, Courier">printf</span>, we must set the value of register %rax to 0 before issuing the call instruction. This is because <span style="font-family: Courier New, Courier">printf</span> uses a variable number of arguments and %rax specifies how many SSE registers are used for the arguments. For our purposes the value will always be 0. Since callouts can only return an single integer value, we have provided a function <span style="font-family: Courier New, Courier">get_int_035()</span>, which will read a single integer input from the terminal and return its integer value. This function is included in the 6035 static library. We cannot use scanf because it returns the number of items read.</p>
	                    

	        			
	                    
	                    
	                    	
	                    

            		 </main><!--Course_inner_section tag close --><div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->             
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom"><div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index-->
<div id="footer">
<nav aria-label="Footer"><nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses"><span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-footer&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
</ul></nav><div id="foot-c2" class="grid_2">
<nav aria-labelledby="f-about"><span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
    <li><a href="https://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li>
</ul></nav><!--about--><nav aria-labelledby="f-tools"><span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>
    <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul></nav><!--tools-->
</div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate"><span id="f-donate" class="footer" aria-hidden="true">Donate</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/donate">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
    <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul></nav><div class="grid_2" id="foot-c4"><nav aria-labelledby="f-featured-sites"><span id="f-featured-sites" class="footer" aria-hidden="true">Featured Sites</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=featured-sites">OCW Educator</a></li>
    <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
    <li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT+K12 Videos">MIT+K12 Videos</a></li>
    <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
    <li><a href="https://outreach.mit.edu/" aria-label="External Link: Outreach at MIT">Outreach@MIT</a></li>
    <li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
</ul></nav></div>
</nav><!--Footer Nav>--><aside id="foot-c5" class="grid_4 omega" aria-labelledby="f-our-corporate-supporters" style="min-height: 289px;"><span id="f-our-corporate-supporters" class="footer" aria-hidden="true">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside><aside class="grid_12 alpha omega" aria-label="OCW 15th Anniversary" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px; font-weight: bold;"><span style="text-transform: uppercase;">MIT OpenCourseWare's</span> 15th anniversary</span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro" src="../../../common/images/logo_sapient.png"></a></p>
</aside><aside class="grid_12 alpha omega" aria-labelledby="f-about-ocw" itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;"><span id="f-about-ocw" class="footer" aria-hidden="true">             About <span itemprop="name">MIT OpenCourseWare</span></span>
<p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">OCW is a free and open publication of material from thousands of MIT courses, covering the entire MIT curriculum. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu">               <img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology" src="../../../common/images/logo_mit.png"></a>             <a href="http://odl.mit.edu">               <img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning" src="https://ocw.mit.edu/images/logo_odl.png"></a>             <a href="http://www.oeconsortium.org/">               <img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium" src="https://ocw.mit.edu/images/logo_oec.png"></a>             <a itemprop="useRightsUrl" rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">               <img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons" src="../../../common/images/cc_by-nc-sa.png"></a>
</div>
<div id="f-legal" class="grid_12 alpha omega" style="border-top: none;">
<p class="copyright">© 2001–2015<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</aside>
</div>
<!--footer-->   <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->
</body>
</html>
